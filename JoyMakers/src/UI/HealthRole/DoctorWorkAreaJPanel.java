/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HealthRole;

import Model.Enterprise.Enterprise;
import Model.Network.Network;
import Model.Organization.DoctorOrg;
import Model.Organization.HealthOrg;
import Model.Organization.Organisation;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.TutorVolunteerWorkReq;
import Model.WorkQueue.HospitalDoctorWorkReq;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import UI.DoctorRole.ProcessPanel;

/**
 *
 * @author Mrinalini
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private HealthOrg org;
    private Enterprise ent;
    private UserAccount ua;
    private Network net;
    
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount acc, HealthOrg org, Enterprise ent, Network net) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.org = org;
        this.ent = ent;
        this.ua = acc;
        this.net=net;
        autoPopReqTbl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JM_btnrefresh = new javax.swing.JButton();
        JM_jScrollPane1 = new javax.swing.JScrollPane();
        JM_tbldocrequest = new javax.swing.JTable();
        JM_btnnewreq = new javax.swing.JButton();
        JM_btndelreq = new javax.swing.JButton();
        JM_btnBack = new javax.swing.JButton();
        JM_lbltitle = new javax.swing.JLabel();
        JM_lblname = new javax.swing.JLabel();
        JM_txtName = new javax.swing.JTextField();
        JM_lblAddress = new javax.swing.JLabel();
        JM_jScrollPane2 = new javax.swing.JScrollPane();
        JM_txtAddress = new javax.swing.JTextArea();
        JM_lbldate = new javax.swing.JLabel();
        JM_txtDate = new javax.swing.JTextField();
        JM_lbltime = new javax.swing.JLabel();
        JM_txtTime = new javax.swing.JTextField();
        JM_lblcontact = new javax.swing.JLabel();
        JM_txtnumber = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        JM_btnrefresh.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        JM_btnrefresh.setForeground(new java.awt.Color(0, 153, 153));
        JM_btnrefresh.setText("Refresh");
        JM_btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JM_btnrefreshActionPerformed(evt);
            }
        });

        JM_tbldocrequest.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        JM_tbldocrequest.setForeground(new java.awt.Color(102, 0, 102));
        JM_tbldocrequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Type", "Case", "Total Patients", "Patient Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JM_tbldocrequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JM_tbldocrequestMouseClicked(evt);
            }
        });
        JM_jScrollPane1.setViewportView(JM_tbldocrequest);

        JM_btnnewreq.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        JM_btnnewreq.setForeground(new java.awt.Color(0, 153, 153));
        JM_btnnewreq.setText("Create New Request");
        JM_btnnewreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JM_btnnewreqActionPerformed(evt);
            }
        });

        JM_btndelreq.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        JM_btndelreq.setForeground(new java.awt.Color(0, 153, 153));
        JM_btndelreq.setText("Delete Request");
        JM_btndelreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JM_btndelreqActionPerformed(evt);
            }
        });

        JM_btnBack.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        JM_btnBack.setForeground(new java.awt.Color(0, 153, 153));
        JM_btnBack.setText("<< Back");
        JM_btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JM_btnBackActionPerformed(evt);
            }
        });

        JM_lbltitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 24)); // NOI18N
        JM_lbltitle.setForeground(new java.awt.Color(255, 255, 255));
        JM_lbltitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JM_lbltitle.setText("Request Doctor Work Area");

        JM_lblname.setBackground(new java.awt.Color(255, 255, 255));
        JM_lblname.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_lblname.setForeground(new java.awt.Color(255, 255, 255));
        JM_lblname.setText("Name:");

        JM_txtName.setEditable(false);
        JM_txtName.setBackground(new java.awt.Color(255, 255, 255));
        JM_txtName.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_txtName.setForeground(new java.awt.Color(102, 0, 102));

        JM_lblAddress.setBackground(new java.awt.Color(255, 255, 255));
        JM_lblAddress.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_lblAddress.setForeground(new java.awt.Color(255, 255, 255));
        JM_lblAddress.setText("Address:");

        JM_txtAddress.setEditable(false);
        JM_txtAddress.setBackground(new java.awt.Color(204, 204, 204));
        JM_txtAddress.setColumns(20);
        JM_txtAddress.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_txtAddress.setForeground(new java.awt.Color(102, 0, 102));
        JM_txtAddress.setRows(5);
        JM_jScrollPane2.setViewportView(JM_txtAddress);

        JM_lbldate.setBackground(new java.awt.Color(255, 255, 255));
        JM_lbldate.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_lbldate.setForeground(new java.awt.Color(255, 255, 255));
        JM_lbldate.setText("Date:");

        JM_txtDate.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_txtDate.setForeground(new java.awt.Color(102, 0, 102));

        JM_lbltime.setBackground(new java.awt.Color(255, 255, 255));
        JM_lbltime.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_lbltime.setForeground(new java.awt.Color(255, 255, 255));
        JM_lbltime.setText("Time:");

        JM_txtTime.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_txtTime.setForeground(new java.awt.Color(102, 0, 102));

        JM_lblcontact.setBackground(new java.awt.Color(255, 255, 255));
        JM_lblcontact.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_lblcontact.setForeground(new java.awt.Color(255, 255, 255));
        JM_lblcontact.setText("Contact Number:");

        JM_txtnumber.setEditable(false);
        JM_txtnumber.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        JM_txtnumber.setForeground(new java.awt.Color(102, 0, 102));
        JM_txtnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JM_txtnumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JM_btnrefresh)
                .addGap(605, 605, 605))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(JM_btnnewreq)
                        .addGap(18, 18, 18)
                        .addComponent(JM_btndelreq))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JM_lblname)
                            .addComponent(JM_lblAddress)
                            .addComponent(JM_lbldate)
                            .addComponent(JM_lbltime)
                            .addComponent(JM_lblcontact))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JM_jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JM_txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JM_txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JM_txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JM_txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(466, 466, 466)
                        .addComponent(JM_lbltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(JM_jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(JM_btnBack)))
                .addContainerGap(463, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(JM_lbltitle)
                .addGap(56, 56, 56)
                .addComponent(JM_btnrefresh)
                .addGap(18, 18, 18)
                .addComponent(JM_jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JM_btnnewreq, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JM_btndelreq, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JM_txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JM_lblname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JM_lblAddress)
                    .addComponent(JM_jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JM_txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JM_lbldate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JM_txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JM_lbltime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JM_txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JM_lblcontact))
                .addGap(44, 44, 44)
                .addComponent(JM_btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JM_btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JM_btnrefreshActionPerformed

        autoPopReqTbl();
    }//GEN-LAST:event_JM_btnrefreshActionPerformed

    private void JM_tbldocrequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JM_tbldocrequestMouseClicked

        int selectedRow = JM_tbldocrequest.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showConfirmDialog(null, "Select a row to view details","Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            HospitalDoctorWorkReq req = (HospitalDoctorWorkReq)JM_tbldocrequest.getValueAt(selectedRow, 0);
            if(!req.getStatus().equalsIgnoreCase("Completed"))
            {
                JOptionPane.showMessageDialog(null, "Updates Unavailable");
                return;
            }
            JM_txtName.setText(req.getDocName());
            JM_txtAddress.setText(req.getAddress());
            SimpleDateFormat formatter = new SimpleDateFormat("dd MMM, yyyy");
            Date date = req.getDate();
            String docDate = formatter.format(date);
            JM_txtDate.setText(docDate);
            JM_txtTime.setText(req.getTime());
            JM_txtnumber.setText(String.valueOf(req.getNumber()));

        }
    }//GEN-LAST:event_JM_tbldocrequestMouseClicked

    private void JM_btnnewreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JM_btnnewreqActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        
        userProcessContainer.add("ReqDoc Panel", new DocReqJPanel(userProcessContainer, ua, ent,net));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_JM_btnnewreqActionPerformed

    private void JM_btndelreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JM_btndelreqActionPerformed
        int selectedRow = JM_tbldocrequest.getSelectedRow();
        if(selectedRow>=0){
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Sure about deleting this request??","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                HospitalDoctorWorkReq req = (HospitalDoctorWorkReq)JM_tbldocrequest.getValueAt(selectedRow, 0);
                if(req.getStatus().equalsIgnoreCase("completed"))
                {
                    JOptionPane.showMessageDialog(null, "Unable to delete accomplished request");
                    return;
                }
                Organisation organisation = null;
                for(Enterprise ent: net.getEntDir().getEntList())
                {
                    if(ent.getEntType().equals(ent.getEntType().Hospital))
                    {
                        for (Organisation org : ent.getOrgDir().getOrgList())
                        {
                            if (org instanceof DoctorOrg){
                                organisation = org;
                                organisation.getWorkQueue().getWrList().remove(req);
                                for(UserAccount a : organisation.getUserAccDir().getUserAccList())
                                {
                                    for(WorkRequest w: a.getWorkQueue().getWrList())
                                    {
                                        if(w.equals(req))
                                        {
                                            a.getWorkQueue().getWrList().remove(req);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (organisation!=null){
                    ua.getWorkQueue().getWrList().remove(req);
                }
                autoPopReqTbl();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Select a Row");
        }
    }//GEN-LAST:event_JM_btndelreqActionPerformed

    private void JM_btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JM_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_JM_btnBackActionPerformed

    private void JM_txtnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JM_txtnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JM_txtnumberActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JM_btnBack;
    private javax.swing.JButton JM_btndelreq;
    private javax.swing.JButton JM_btnnewreq;
    private javax.swing.JButton JM_btnrefresh;
    private javax.swing.JScrollPane JM_jScrollPane1;
    private javax.swing.JScrollPane JM_jScrollPane2;
    private javax.swing.JLabel JM_lblAddress;
    private javax.swing.JLabel JM_lblcontact;
    private javax.swing.JLabel JM_lbldate;
    private javax.swing.JLabel JM_lblname;
    private javax.swing.JLabel JM_lbltime;
    private javax.swing.JLabel JM_lbltitle;
    private javax.swing.JTable JM_tbldocrequest;
    private javax.swing.JTextArea JM_txtAddress;
    private javax.swing.JTextField JM_txtDate;
    private javax.swing.JTextField JM_txtName;
    private javax.swing.JTextField JM_txtTime;
    private javax.swing.JTextField JM_txtnumber;
    // End of variables declaration//GEN-END:variables
public void autoPopReqTbl() {
       DefaultTableModel mdl = (DefaultTableModel) JM_tbldocrequest.getModel();
       mdl.setRowCount(0);
       for (Iterator<WorkRequest> it = ua.getWorkQueue().getWrList().iterator(); it.hasNext();) 
       {
           WorkRequest workRequest = it.next();
           if(workRequest instanceof HospitalDoctorWorkReq){
               HospitalDoctorWorkReq req = (HospitalDoctorWorkReq) workRequest;
                Object[] row = new Object[5];
                row[0] = req;
                row[1]=req.getCaseType();
                row[2]=req.getNoOfPatients();
                row[3]=req.getPatientType();
                row[4] = req.getStatus();
                mdl.addRow(row);
           }
           
       }
}
}
