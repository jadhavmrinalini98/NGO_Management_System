/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HealthRole;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrg;
import Business.Organization.HealthOrg;
import Business.Organization.Organisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.TutorVolunteerWorkReq;
import Business.WorkQueue.HospitalDoctorWorkReq;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import UI.DoctorRole.ProcessPanel;

/**
 *
 * @author Mrinalini
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private HealthOrg org;
    private Enterprise ent;
    private UserAccount ua;
    private Network net;
    
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount acc, HealthOrg org, Enterprise ent, Network net) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.org = org;
        this.ent = ent;
        this.ua = acc;
        this.net=net;
        autoPopReqTbl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnrefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbldocrequest = new javax.swing.JTable();
        btnnewreq = new javax.swing.JButton();
        btndelreq = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lbltitle = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lbldate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        lbltime = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        lblcontact = new javax.swing.JLabel();
        txtnumber = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        btnrefresh.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        btnrefresh.setForeground(new java.awt.Color(0, 153, 153));
        btnrefresh.setText("Refresh");
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });

        tbldocrequest.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tbldocrequest.setForeground(new java.awt.Color(102, 0, 102));
        tbldocrequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Type", "Case", "Total Patients", "Patient Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbldocrequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbldocrequestMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbldocrequest);

        btnnewreq.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        btnnewreq.setForeground(new java.awt.Color(0, 153, 153));
        btnnewreq.setText("Create New Request");
        btnnewreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewreqActionPerformed(evt);
            }
        });

        btndelreq.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        btndelreq.setForeground(new java.awt.Color(0, 153, 153));
        btndelreq.setText("Delete Request");
        btndelreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndelreqActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(0, 153, 153));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lbltitle.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 24)); // NOI18N
        lbltitle.setForeground(new java.awt.Color(255, 255, 255));
        lbltitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbltitle.setText("Request Doctor Work Area");

        lblname.setBackground(new java.awt.Color(255, 255, 255));
        lblname.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        lblname.setForeground(new java.awt.Color(255, 255, 255));
        lblname.setText("Name:");

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(255, 255, 255));
        txtName.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtName.setForeground(new java.awt.Color(102, 0, 102));

        lblAddress.setBackground(new java.awt.Color(255, 255, 255));
        lblAddress.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        lblAddress.setForeground(new java.awt.Color(255, 255, 255));
        lblAddress.setText("Address:");

        txtAddress.setEditable(false);
        txtAddress.setBackground(new java.awt.Color(204, 204, 204));
        txtAddress.setColumns(20);
        txtAddress.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtAddress.setForeground(new java.awt.Color(102, 0, 102));
        txtAddress.setRows(5);
        jScrollPane2.setViewportView(txtAddress);

        lbldate.setBackground(new java.awt.Color(255, 255, 255));
        lbldate.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        lbldate.setForeground(new java.awt.Color(255, 255, 255));
        lbldate.setText("Date:");

        txtDate.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtDate.setForeground(new java.awt.Color(102, 0, 102));

        lbltime.setBackground(new java.awt.Color(255, 255, 255));
        lbltime.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        lbltime.setForeground(new java.awt.Color(255, 255, 255));
        lbltime.setText("Time:");

        txtTime.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtTime.setForeground(new java.awt.Color(102, 0, 102));

        lblcontact.setBackground(new java.awt.Color(255, 255, 255));
        lblcontact.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        lblcontact.setForeground(new java.awt.Color(255, 255, 255));
        lblcontact.setText("Contact Number:");

        txtnumber.setEditable(false);
        txtnumber.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtnumber.setForeground(new java.awt.Color(102, 0, 102));
        txtnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnrefresh)
                .addGap(605, 605, 605))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(btnnewreq)
                        .addGap(18, 18, 18)
                        .addComponent(btndelreq))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblname)
                            .addComponent(lblAddress)
                            .addComponent(lbldate)
                            .addComponent(lbltime)
                            .addComponent(lblcontact))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(466, 466, 466)
                        .addComponent(lbltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(btnBack)))
                .addContainerGap(463, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(lbltitle)
                .addGap(56, 56, 56)
                .addComponent(btnrefresh)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnnewreq, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndelreq, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAddress)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbldate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbltime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblcontact))
                .addGap(44, 44, 44)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed

        autoPopReqTbl();
    }//GEN-LAST:event_btnrefreshActionPerformed

    private void tbldocrequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbldocrequestMouseClicked

        int selectedRow = tbldocrequest.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showConfirmDialog(null, "Select a row to view details","Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            HospitalDoctorWorkReq req = (HospitalDoctorWorkReq)tbldocrequest.getValueAt(selectedRow, 0);
            if(!req.getStatus().equalsIgnoreCase("Completed"))
            {
                JOptionPane.showMessageDialog(null, "Updates Unavailable");
                return;
            }
            txtName.setText(req.getDocName());
            txtAddress.setText(req.getAddress());
            SimpleDateFormat formatter = new SimpleDateFormat("dd MMM, yyyy");
            Date date = req.getDate();
            String docDate = formatter.format(date);
            txtDate.setText(docDate);
            txtTime.setText(req.getTime());
            txtnumber.setText(String.valueOf(req.getNumber()));

        }
    }//GEN-LAST:event_tbldocrequestMouseClicked

    private void btnnewreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewreqActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        
        userProcessContainer.add("ReqDoc Panel", new DocReqJPanel(userProcessContainer, ua, ent,net));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnnewreqActionPerformed

    private void btndelreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndelreqActionPerformed
        int selectedRow = tbldocrequest.getSelectedRow();
        if(selectedRow>=0){
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Sure about deleting this request??","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                HospitalDoctorWorkReq req = (HospitalDoctorWorkReq)tbldocrequest.getValueAt(selectedRow, 0);
                if(req.getStatus().equalsIgnoreCase("completed"))
                {
                    JOptionPane.showMessageDialog(null, "Unable to delete accomplished request");
                    return;
                }
                Organisation organisation = null;
                for(Enterprise ent: net.getEntDir().getEntList())
                {
                    if(ent.getEntType().equals(ent.getEntType().Hospital))
                    {
                        for (Organisation org : ent.getOrgDir().getOrgList())
                        {
                            if (org instanceof DoctorOrg){
                                organisation = org;
                                organisation.getWorkQueue().getWrList().remove(req);
                                for(UserAccount a : organisation.getUserAccDir().getUserAccList())
                                {
                                    for(WorkRequest w: a.getWorkQueue().getWrList())
                                    {
                                        if(w.equals(req))
                                        {
                                            a.getWorkQueue().getWrList().remove(req);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (organisation!=null){
                    ua.getWorkQueue().getWrList().remove(req);
                }
                autoPopReqTbl();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Select a Row");
        }
    }//GEN-LAST:event_btndelreqActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnumberActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btndelreq;
    private javax.swing.JButton btnnewreq;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblcontact;
    private javax.swing.JLabel lbldate;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lbltime;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JTable tbldocrequest;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtnumber;
    // End of variables declaration//GEN-END:variables
public void autoPopReqTbl() {
       DefaultTableModel mdl = (DefaultTableModel) tbldocrequest.getModel();
       mdl.setRowCount(0);
       for (Iterator<WorkRequest> it = ua.getWorkQueue().getWrList().iterator(); it.hasNext();) 
       {
           WorkRequest workRequest = it.next();
           if(workRequest instanceof HospitalDoctorWorkReq){
               HospitalDoctorWorkReq req = (HospitalDoctorWorkReq) workRequest;
                Object[] row = new Object[5];
                row[0] = req;
                row[1]=req.getCaseType();
                row[2]=req.getNoOfPatients();
                row[3]=req.getPatientType();
                row[4] = req.getStatus();
                mdl.addRow(row);
           }
           
       }
}
}
