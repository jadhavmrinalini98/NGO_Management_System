/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.DoctorRole;
import Business.Enterprise.Enterprise;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalDoctorWorkReq;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
/**
 *
 * @author monalikapradhan
 */
public class ProcessPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private Enterprise ent;
    private HospitalDoctorWorkReq req;
    private UserAccount ua;
    /**
     * Creates new form ProcessPanel
     */
    public ProcessPanel(JPanel userProcessContainer,UserAccount acc, HospitalDoctorWorkReq req) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ent = ent;
        this.req = req;
        this.ua=acc;
        autoPopField();
    }
    
    public void autoPopField()
    {
        if(req.getDocName()!=null)
        {
        txtDocName.setText(req.getDocName());
        dtChoser.setDate(req.getDate());
        txtOffNumber.setText(String.valueOf(req.getNumber()));
        txtAddress.setText(req.getAddress());
        
        Date time = null;
        String volTime = req.getTime();
        SimpleDateFormat defaultfmt = new SimpleDateFormat("HH:mm");

        try {
            time = defaultfmt.parse(volTime);
        } catch (ParseException ex) {
        }

        tsTime.setValue(time);
        }
    }

    private boolean checkPhoneNumber(String phNo) {
        Pattern pattern = Pattern.compile("^[0-9]{10}$");
        Matcher matcher = pattern.matcher(phNo);
        return matcher.matches();
    }
    
    private boolean timeChecker(String time,Date date)
    {
        SimpleDateFormat fmt = new SimpleDateFormat("dd MMM, yyyy");
        String s1=time.substring(0,2);
        String s2=time.substring(3,5);
        int h1=Integer.parseInt(s1);
        int m1=Integer.parseInt(s2);
        for (Iterator<WorkRequest> wr = ua.getWorkQueue().getWrList().iterator(); wr.hasNext();)
        {
            
            HospitalDoctorWorkReq workRequest = (HospitalDoctorWorkReq) wr.next();
            if(workRequest.getStatus().equalsIgnoreCase("completed"))
            {
                
                String d1 = fmt.format(workRequest.getDate());
                String d2= fmt.format(date);
                if(d1.equals(d2))
                {
                    String t2=workRequest.getTime();
                    int h2=Integer.parseInt(t2.substring(0, 2));
                    int m2=Integer.parseInt(t2.substring(3,5));
                    int min=Math.abs(m1-m2);
                    int hrs=Math.abs(h1-h2);
                    int totalMinutes=Math.abs((hrs*60)-min);
                    if(totalMinutes<30)
                    {
                        JOptionPane.showMessageDialog(null, "Already booked appointment "+t2+" for this day. Book appointments later.");
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    private boolean dateChecker(Date date, String time)
    {
        SimpleDateFormat timefmt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        SimpleDateFormat dtfmt = new SimpleDateFormat("dd/MM/yyyy");
        Date date1 = new Date();
        String s= timefmt.format(date1);
        if(date1.before(date))
        {
            return true;
        }
        else
        {
            String s1=dtfmt.format(date);
            String s2=dtfmt.format(date1);
            if(s1.equals(s2))
            {
                s=s.substring(11,16);
                int val=s.compareTo(time);
                if(val<=0)
                {return true;}
            }
            else
            {return false;}
        }
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        tsTime = new javax.swing.JSpinner(sm);
        jLabel5 = new javax.swing.JLabel();
        txtOffNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDocName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        dtChoser = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(102, 0, 102));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 102));
        jLabel2.setText("Address:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setText("Date:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 102));
        jLabel4.setText("Time:");

        JSpinner.DateEditor de = new JSpinner.DateEditor(tsTime, "HH:mm");
        tsTime.setEditor(de);
        tsTime.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 102));
        jLabel5.setText("Office Number:");

        txtOffNumber.setBackground(new java.awt.Color(204, 204, 204));
        txtOffNumber.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtOffNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOffNumberActionPerformed(evt);
            }
        });

        txtAddress.setBackground(new java.awt.Color(204, 204, 204));
        txtAddress.setColumns(20);
        txtAddress.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        txtAddress.setForeground(new java.awt.Color(102, 0, 102));
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        btnAdd.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(102, 0, 102));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Name:");

        txtDocName.setBackground(new java.awt.Color(204, 204, 204));
        txtDocName.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 0, 102));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Process Doctor Request");

        btnBack.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        dtChoser.setFont(new java.awt.Font(".SF NS Mono", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(54, 54, 54)
                            .addComponent(jLabel2))
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtOffNumber, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tsTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addComponent(dtChoser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                    .addComponent(txtDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(42, 42, 42)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel10))
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDocName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tsTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOffNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dtChoser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtOffNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOffNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOffNumberActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String name=txtDocName.getText();
        if(name==null || name.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Name field cannot be left empty");
            return;
        }
        String addr=txtAddress.getText();
        if(addr==null || addr.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Address field cannot be left empty");
            return;
        }
        String num = txtOffNumber.getText();
        if(!checkPhoneNumber(num))
        {
            JOptionPane.showMessageDialog(null, "Enter a valid contact number");
            return;
        }

        Date date = dtChoser.getDate();
        if(date == null || date.equals("")){
            JOptionPane.showMessageDialog(null, "Date field cannot be left empty");
            return;
        }

        SimpleDateFormat fmt = new SimpleDateFormat("HH:mm");

        Date time =  (Date) tsTime.getValue();
        String time1 = fmt.format(time);
        if(time1 == null || time1.equals("")){
            JOptionPane.showMessageDialog(null, "Time field cannot be left empty");
            return;
        }
        if(!dateChecker(date, time1))
        {
            JOptionPane.showMessageDialog(null, "Invalid date and time");
            return;
        }

        if(!timeChecker(time1,date))
        {
            return;
        }

        req.setDate(date);
        req.setTime(time1);
        req.setDocName(name);
        req.setAddress(addr);
        req.setNumber(num);
        req.setStatus("Completed");
        JOptionPane.showMessageDialog(null, "Successfully booked appointment");
        dtChoser.setDate(null);
        txtDocName.setText("");
        txtOffNumber.setText("");
        txtAddress.setText("");

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        HomePagePanel homePagePanel = (HomePagePanel) component;
        homePagePanel.autoPopAssignedtbl();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private com.toedter.calendar.JDateChooser dtChoser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner tsTime;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDocName;
    private javax.swing.JTextField txtOffNumber;
    // End of variables declaration//GEN-END:variables
}
